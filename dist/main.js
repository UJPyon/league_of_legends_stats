/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

var changeData = function changeData(dataPath) {
  svg.selectAll("circle").transition().duration(400).style("opacity", 0).remove();
  svg.selectAll("path").transition().duration(400).style("opacity", 0).remove();
  d3.json(dataPath, function (data) {
    var dataPoint = data.frames;
    svg.append("svg:g").selectAll("circle").data(dataPoint).enter().append("svg:circle").style("opacity", 0).attr("cx", function (d) {
      return xScale(d.position.x);
    }).attr("cy", function (d) {
      return yScale(d.position.y);
    }).attr("r", 5).style("fill", function (d) {
      if (d.victimId < 6) {
        return "rgb(0, 77, 172)"; // <-- colors of data points on map: changeable
      } else {
        return "rgb(0, 102, 227)"; // <-- colors of data points on map: changeable
      }
    }).transition().duration(400).style("opacity", 1);
    var color = d3.scaleLinear().domain([0, 1]).range(["rgba(0,0,0,0.1)", "rgba(0,0,0,0.3)"]);
    var densityData = d3.contourDensity().x(function (d) {
      return xScale(d.position.x);
    }).y(function (d) {
      return yScale(d.position.y);
    }).size([width, height]).bandwidth(20)(dataPoint);
    svg.insert("g", "g").selectAll("path").data(densityData).enter().append("path").style("opacity", 0).attr("d", d3.geoPath()).attr("fill", function (d) {
      return color(d.value * 300);
    }).transition().duration(400).style("opacity", 1);
  });
};

window.changeData = changeData.bind(window); // -------------------------
// --Map #1 For Comparison--
// -------------------------

var map1 = [],
    width = 500,
    height = 500,
    domain = {
  min: {
    x: -120,
    y: -120
  },
  max: {
    x: 14870,
    y: 14980
  }
},
    bg = "./assets/images/minimap.png",
    xScale,
    yScale,
    svg;
var color = d3.scaleLinear().domain([0, 3]).range(["white", "steelblue"]).interpolate(d3.interpolateLab);
xScale = d3.scaleLinear().domain([domain.min.x, domain.max.x]).range([0, width]);
yScale = d3.scaleLinear().domain([domain.min.y, domain.max.y]).range([height, 0]);
svg = d3.select("#map1").append("svg:svg").attr("width", width).attr("height", height);
svg.append("image").attr("xlink:href", bg).attr("x", "0").attr("y", "0").attr("width", width).attr("height", height);
d3.json("./match_data/iron_match_data.json", function (data) {
  var dataPoint = data.frames;
  console.log(dataPoint);
  svg.append("svg:g").selectAll("circle").data(dataPoint).enter().append("svg:circle").attr("cx", function (d) {
    return xScale(d.position.x);
  }).attr("cy", function (d) {
    return yScale(d.position.y);
  }).attr("r", 5).style("fill", function (d) {
    if (d.victimId < 6) {
      return "rgb(0, 77, 172)"; // <-- colors of data points on map: changeable
    } else {
      return "rgb(0, 102, 227)"; // <-- colors of data points on map: changeable
    }
  });
  var color = d3.scaleLinear().domain([0, 1]).range(["rgba(0,0,0,0.1)", "rgba(0,0,0,0.6)"]);
  var densityData = d3.contourDensity().x(function (d) {
    return xScale(d.position.x);
  }).y(function (d) {
    return yScale(d.position.y);
  }).size([width, height]).bandwidth(20)(dataPoint);
  svg.insert("g", "g").selectAll("path").data(densityData).enter().append("path").attr("d", d3.geoPath()).attr("fill", function (d) {
    // console.log(d.value * 300)
    return color(d.value * 300);
  });
}); // -------------------------
// --Map #2 For Comparison--
// -------------------------

var svg2;
svg2 = d3.select("#map2").append("svg:svg").attr("width", width).attr("height", height);
svg2.append("image").attr("xlink:href", bg).attr("x", "0").attr("y", "0").attr("width", width).attr("height", height);
d3.json("./match_data/challenger_match_data.json", function (data) {
  var dataPoint = data.frames; // console.log(dataPoint);

  svg2.append("svg:g").selectAll("circle").data(dataPoint).enter().append("svg:circle").attr("cx", function (d) {
    return xScale(d.position.x);
  }).attr("cy", function (d) {
    return yScale(d.position.y);
  }).attr("r", 5).style("fill", function (d) {
    if (d.victimId < 6) {
      return "#ec2540"; // <-- colors of data points on map: changeable
    } else {
      return "#b81c30"; // <-- colors of data points on map: changeable
    }
  });
  var color = d3.scaleLinear().domain([0, 1]).range(["rgba(0,0,0,0.1)", "rgba(0,0,0,0.3)"]);
  var densityData = d3.contourDensity().x(function (d) {
    return xScale(d.position.x);
  }).y(function (d) {
    return yScale(d.position.y);
  }).size([width, height]).bandwidth(20)(dataPoint);
  svg2.insert("g", "g").selectAll("path").data(densityData).enter().append("path").attr("d", d3.geoPath()).attr("fill", function (d) {
    return color(d.value * 300);
  });
}); // --------------------
// --Method for Map 2--
// --------------------

var changeData2 = function changeData2(dataPath) {
  svg2.selectAll("circle").transition().duration(500).style("opacity", 0).remove();
  svg2.selectAll("path").transition().duration(500).style("opacity", 0).remove();
  d3.json(dataPath, function (data) {
    var dataPoint = data.frames;
    svg2.append("svg:g").selectAll("circle").data(dataPoint).enter().append("svg:circle").style("opacity", 0).attr("cx", function (d) {
      return xScale(d.position.x);
    }).attr("cy", function (d) {
      return yScale(d.position.y);
    }).attr("r", 5).style("fill", function (d) {
      if (d.victimId < 6) {
        return "#ec2540"; // <-- colors of data points on map: changeable
      } else {
        return "#b81c30"; // <-- colors of data points on map: changeable
      }
    }).transition().duration(600).style("opacity", 1);
    var color = d3.scaleLinear().domain([0, 1]).range(["rgba(0,0,0,0.1)", "rgba(0,0,0,0.3)"]);
    var densityData = d3.contourDensity().x(function (d) {
      return xScale(d.position.x);
    }).y(function (d) {
      return yScale(d.position.y);
    }).size([width, height]).bandwidth(20)(dataPoint);
    svg2.insert("g", "g").selectAll("path").data(densityData).enter().append("path").style("opacity", 0).attr("d", d3.geoPath()).attr("fill", function (d) {
      return color(d.value * 300);
    }).transition().duration(600).style("opacity", 1);
  });
};

window.changeData2 = changeData2.bind(window);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,